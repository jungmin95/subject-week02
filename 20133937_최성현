# Hello Servlet의 전체 구성
##1.서블릿을 사용할수있는 응용소프트웨어를 킨다  
##2.java EE 환겨으로 바꾸어 준다
##3.dynamic web project로 파일을 만들어준다  
##4.서버를 사용할수있게 was를 사용할수있는 프로그램과 연결한다
##5.web.xml을 만들어 주기 위해 Generate web.xml deployment descriptor 체크
##6.그후 webinf 폴더에 있느 web.xml 파일을 누른후 편집



#### HelloSever.java
`package kr.ac.bu.hello;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;


@WebServlet("/HelloSever")
public class HelloSever extends HttpServlet {
   private static final long serialVersionUID = 1L;
       
   
   protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
   
      response.setContentType("text/html");
      response.setCharacterEncoding("utf-8");
      
      PrintWriter out = response.getWriter();
      
      out.println("<html>");
      out.println("<body>");
      
      out.println("<h1>Hello Servlet!!</h1>");
      
      out.println("</body>");
      out.println("</html>");
   }

}`

- Servlet Spec 3.0 버전 전에 는 web.xml에서 매핑을 해야 했지만  3.0 부터는 @WebServlet으로 매핑이 가능해짐.  
- 서블릿은 servlet-api의 HttpServlet을 상속받는다
- 여기서 HttpServlet은 GenericServlet을 상속하는데 GenericServlet은 서블릿 관리에 필요한 기능들이 구현 되있는 추상클래스이다.
- HttpServlet의 service() 메소드에서는 요청 방식에 따라 그에 맞는 메소드를 호출하는데 이것의 예가 코드에 있는 Get방식의 doGet()이다.

#### web.xml
`<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
  <display-name>kr.ac.bu.bee</display-name>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
</web-app>`



## JSP와 Servlet의 개념

**Servlet**(Server + Let / Server + Applet) 
서버에서 웹페이지 등을 동적으로 생성하거나 데이터 처리를 수행하기 위해 자바로 작성된 프로그램  
자바언어를 웹어플리케이션에 조금 더 개발하기 쉽게 하기 위해 만든 API(라이브러리, 클래스 들)이며 이 규약에 맞는 라이브러리나 클래스들을 상속 및 구현하여 만든 클래스들  
**JSP**(Java Server Page)는 서블릿을 작성하지 않고도 간편하게 웹프로그래밍을 구현하게 만든 기술

## JSP와 Servlet의 역할

각 기술의 장점들을 최대한 활용 하기 위해 역할을 분배 하였다.  
**JSP**는 사용자에게 결과를 보여주는 프리젠테이션 층을 담당한다.  
**Servlet**은 사용자에게 요청을 받아 분석하고 비지니스 층과 통신하여 처리하고 처리한 결과를 다시 사용자에게 응답하는 컨트롤러 층을 담당한다.


## 서블릿 컨테이너(Servlet Container)의 개념

서블릿은 웹서버에서 자체적으로 실행하지 못한다. 따라서 이것을 실행 시켜주는 것이 바로 서블릿 컨테이너다.  
**서블릿 컨테이너**는 생명주기를 관리하고 클라이언트의 요청에 따른 멀티 스레드를 지원하여 다중 요청을 알아서 처리해준다.  
또한 클라이언트의 Requset를 받아주고 Response를 보낼 수 있게 소켓을 만들어 웹 서버와 통신이 가능하게 해준다.  
대표적 컨테이너로는 **Tomcat,jetty,iboss** 등이 있다.


## 서블릿의 동작과정

1) 사용자가 URL을 클릭하면 HTTP Request를 Servlet Container에 보낸다.  
2) Servlet Container는 HttpServletRequest, HttpServletResponse 두 객체를 생성한다.  
3) 사용자가 요청한 URL을 분석하여 어느 서블릿에 대한 요청인지 찾는다.  
4) 컨테이너는 서블릿 service() 메소드를 호출하며, POST, GET여부에 따라 doGet() 또는 doPost()가 호출된다.  
5) doGet() 또는 doPost() 메소드는 동적인 페이지를 생성한 후 HttpServletResponse객체에 응답을 보낸다.  
6) 응답이 완료되면 HttpServletRequest, HttpServletResponse 두 객체를 소멸시킨다.  


#### (어떤 책, 어떤 자료를 참고해서 과제 수행했는지 정리해 주세요. )